"use strict"
const through = require('through')
const combiner = require('stream-combiner')
const gb = require('stream-group-by')
const sort = require('fast-stream-sort')
const comp = require('comparer').objectComparison2
const fastCsv = require('fast-csv')
const fs = require('fs')
const filter = require('stream-filter')
const runRScript = require('./RScriptWrapper')

const inputFile = './data/grouped_by_res_wb_sample3.csv',
    dataFile = './data/grouped_by_res_wb_sample3N.csv',
    rScriptFile = './bidrate_sequential_prediction/extract_linear_coefficients2.R',
    rOutputFile = './data/grouped_by_res_wb_sample3N_coeffs.csv'

/* N-run-regression
prepares the data and calls R script to run regressions.

 the input file to this tranform can be generated by running the query
 queries/bid_rate_by_res_and_wb.sql. Note that the current query has the list of placements
 and date range hard-coded.

 for more details on the R script interface, see the comments at the top of the r script file.
*/
fs.createReadStream(inputFile, 'utf8')
    .pipe(fastCsv.parse({ headers: true }))
    .pipe(filter.obj(x => x.res < 50))
    .pipe(through(function (data) {
        var res = {
            tag_url: data.tag_url,
            placement_id: data.placement_id,
            network: data.network,
            has_cookie: data.has_cookie,
            res: data.res,
            wb: data.wb == data.res ? null : data.wb,
            wb_res_interaction: data.wb == data.res ? null : data.res * data.wb,
            bid_rate_so_far: data.wb == data.res ? null : data.wb / data.res,
            ones: 1,
            bid_rate_eq: data.wb == data.res && data.with_response ? data.with_bid / data.with_response : null,
            bid_rate_not_eq: data.res != data.wb && data.with_response ? data.with_bid / data.with_response : null,
            bid_value_eq: data.wb != data.res ? null : data.total_bid_value / data.with_bid,
            bid_value_not_eq: data.wb == data.res ? null : data.total_bid_value / data.with_bid,
        }
        this.queue(res);
    }))
    .pipe(fastCsv.createWriteStream({ headers: true }))
    .pipe(fs.createWriteStream(dataFile, 'utf8')).on('finish', function () {
        console.log('running R script')
        var success = runRScript(rScriptFile,
            [dataFile, 'tag_url,placement_id,network,has_cookie', 'bid_rate_eq,bid_rate_not_eq,bid_value_eq,bid_value_not_eq'],
            rOutputFile)
            
        console.log('R script completed with status ' + success)
    })
